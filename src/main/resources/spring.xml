<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:mybatis-spring="http://mybatis.org/schema/mybatis-spring"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx.xsd http://www.springframework.org/schema/aop https://www.springframework.org/schema/aop/spring-aop.xsd http://mybatis.org/schema/mybatis-spring http://mybatis.org/schema/mybatis-spring.xsd">

    <!--指定properties属性文件的位置-->
    <context:property-placeholder location="classpath:db.properties"/>

    <!--组件扫描,排除扫描Controller-->
    <context:component-scan base-package="com.ssm" use-default-filters="true">
         <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
     </context:component-scan>

    <!--数据源-->
    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource">
        <property name="driverClass"  value="${jdbc.driver}"/>
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <property name="user" value="${jdbc.username}"/>
        <property name="password" value="${jdbc.password}"/>
    </bean>

    <!--事务-->
    <bean id="dataSourceTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--基于注解使用事务-->
    <tx:annotation-driven transaction-manager="dataSourceTransactionManager"/>

    <!--Spring和Mybatis整合-->
    <!--1.SqlSession对象的创建管理等-->
    <bean  class="org.mybatis.spring.SqlSessionFactoryBean">
        <!--数据源-->
        <property name="dataSource" ref="dataSource"/>
        <!--Mybatis的全局配置文件-->
        <property name="configLocation" value="classpath:mybatis-config.xml"/>
        <!--Mybatis的SQL映射文件,现在可以随意指定加载目录-->
        <property name="mapperLocations" value="classpath:mybatis/mapper/*.xml"/>
        <!--别名处理-->
        <property name="typeAliasesPackage" value="com.ssm.beans"/>
    </bean>

    <!--2.Mapper接口代理实现类对象的创建管理等
            MapperScannerConfigurer会为指定包下的Mapper接口生成代理实现类对象并管理到IOC容器中
        EmployeeMapper  ==>代理实现 ==>对象 对象在IOC容器中的id:employeeMapper
    -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.ssm.mapper"/>
    </bean>

    <!--同上面的把Mapper注入到容中的原理效果一样-->
    <!--<mybatis-spring:scan base-package="com.ssm.mapper"/>-->
</beans>